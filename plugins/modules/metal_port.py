#!/usr/bin/python
# -*- coding: utf-8 -*-

# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

# DOCUMENTATION, EXAMPLES, and RETURN are generated by
# ansible_specdoc. Do not edit them directly.

DOCUMENTATION = '''
author: Equinix DevRel Team (@equinix) <support@equinix.com>
description: This Terraform resource doesn't create an API resource in Equinix Metal,
  but rather provides finer control for [Layer 2 networking](https://deploy.equinix.com/developers/docs/metal/layer2-networking/overview/).
module: metal_port
notes: []
options:
  bonded:
    default: false
    description:
    - Whether the port should be bonded.
    required: false
    type: bool
  id:
    description:
    - UUID of the port.
    required: true
    type: str
  layer2:
    default: false
    description:
    - Whether the port should be in Layer 2 mode.
    required: false
    type: bool
  native_vlan_id:
    description:
    - UUID of native VLAN of the port
    required: false
    type: str
  vlan_ids:
    description:
    - UUIDs of VLANs to attach to the port
    elements: str
    required: false
    type: list
requirements: null
short_description: Manage a device port in Equinix Metal
'''
EXAMPLES = '''
- name: Convert port to layer 2
  hosts: localhost
  tasks:
  - equinix.cloud.metal_port:
      id: device port ID
      layer2: true
'''
RETURN = '''
metal_port:
  description: The Metal device port
  returned: always
  sample:
  - id: 7624f0f7-75b6-4271-bc64-632b80f87de2
    layer2: true
    vlan_ids:
    - some VLAN ID
  type: dict
'''

from ansible.module_utils._text import to_native
from ansible_specdoc.objects import (
    SpecField,
    FieldType,
    SpecReturnValue,
)
import traceback

from ansible_collections.equinix.cloud.plugins.module_utils.equinix import (
    EquinixModule,
    get_diff,
    getSpecDocMeta,
)

import equinix.services.metalv1 as equinix_metal

module_spec = dict(
    id=SpecField(
        type=FieldType.string,
        description=['UUID of the port.'],
        required=True,
    ),
    bonded=SpecField(
        type=FieldType.bool,
        description=['Whether the port should be bonded.'],
        default=False,
        editable=True,
    ),
    layer2=SpecField(
        type=FieldType.bool,
        description=['Whether the port should be in Layer 2 mode.'],
        default=False,
        editable=True,
    ),
	native_vlan_id=SpecField(
		type=FieldType.string,
		description=["UUID of native VLAN of the port"],
        editable=True,
    ),
    vlan_ids=SpecField(
        type=FieldType.list,
        element_type=FieldType.string,
        description=['UUIDs of VLANs to attach to the port'],
        editable=True,
    ),
)


specdoc_examples = [
    '''
- name: Convert port to layer 2
  hosts: localhost
  tasks:
  - equinix.cloud.metal_port:
      id: "device port ID"
      layer2: true
''',
]

return_values = [
{
  "id": "7624f0f7-75b6-4271-bc64-632b80f87de2",
  "layer2": True,
  "vlan_ids": ["some VLAN ID"]
}
]

MUTABLE_ATTRIBUTES = [
    k for k, v in module_spec.items() if v.editable
]

SPECDOC_META = getSpecDocMeta(
    short_description='Manage a device port in Equinix Metal',
    description=(
        'This Terraform resource doesn\'t create an API resource '
        'in Equinix Metal, but rather provides finer control for '
        '[Layer 2 networking](https://deploy.equinix.com/developers/docs/metal/layer2-networking/overview/).'
    ),
    examples=specdoc_examples,
    options=module_spec,
    return_values={
        "metal_port": SpecReturnValue(
            description='The Metal device port',
            type=FieldType.dict,
            sample=return_values,
        ),
    },
)

def main():
    module = EquinixModule(
        argument_spec=SPECDOC_META.ansible_spec,
    )

    state = module.params.get("state")

    if state != "present":
        module.fail_json(msg="Metal ports cannot be deleted")

    changed = False

    try:
        module.params_syntax_check()

        port = equinix_metal.PortsApi(module.equinix_metal_client).find_port_by_id(module.params['id'])

        result = port.to_dict()

        if port:
            # TODO replace this with explicit checks to determine which
            # actions are needed and then do those actions
            diff = get_diff(module.params, result, MUTABLE_ATTRIBUTES)
            if diff:
                changed = True
        else:
            module.fail_json(msg="Could not find metal_port with ID {0}".format(module.params['id']))
    except Exception as e:
        tb = traceback.format_exc()
        module.fail_json(msg="Error in metal_port: {0}".format(to_native(e)),
                         exception=tb)


    
    result.update({'changed': changed})
    module.exit_json(**result)

if __name__ == '__main__':
    main()
