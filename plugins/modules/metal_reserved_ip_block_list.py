#!/usr/bin/python
# -*- coding: utf-8 -*-

# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

# DOCUMENTATION, EXAMPLES, and METAL_PROJECT_ARGS are generated by
# ansible_specdoc. Do not edit them directly.

DOCUMENTATION = '''
author: Equinix DevRel Team (@equinix) <support@equinix.com>
description: Gather list of reserved IP blocks matching the specified criteria
module: metal_reserved_ip_block_list
notes: []
options:
  metro:
    description:
    - The metro to list IP addresses for
    required: false
    type: str
  project_id:
    description:
    - UUID of the project to list IP addresses for
    required: true
    type: str
  type:
    choices:
    - public_ipv4
    - public_ipv6
    - private_ipv4
    - global_ipv4
    - vrf
    description:
    - The type of IP address to list
    required: true
    type: str
requirements:
- python >= 3
- equinix_metal >= 0.0.1
short_description: Gather list of reserved IP blocks
'''
EXAMPLES = '''
- name: Gather list of public_ipv4 reserved_ip_blocks in a project
  hosts: localhost
  tasks:
  - equinix.cloud.metal_reserved_ip_block_list:
      type: public_ipv4
      project_id: 2a5122b9-c323-4d5c-b53c-9ad3f54273e7
- name: Gather list of public_ipv6 reserved_ip_blocks in a project in metro ams
  hosts: localhost
  tasks:
  - equinix.cloud.metal_reserved_ip_block_list:
      type: public_ipv6
      project_id: 2a5122b9-c323-4d5c-b53c-9ad3f54273e7
      metro: ams
'''
RETURN = '''
resources:
  description: Found resources
  returned: always
  sample:
  - "\n[\n    {\n        \"address_family\": 4,\n        \"customdata\": {},\n   \
    \     \"details\": \"some desc fff\",\n        \"id\": \"16148fad-7839-4c63-b33f-0ecfec4f9e29\"\
    ,\n        \"management\": false,\n        \"metro\": \"da\",\n        \"netmask\"\
    : \"255.255.255.255\",\n        \"network\": \"145.40.102.107\",\n        \"project_id\"\
    : \"52000fb2-ee46-4673-93a8-de2c2bdba33b\",\n        \"public\": true,\n     \
    \   \"quantity\": 1,\n        \"tags\": [],\n        \"type\": \"public_ipv4\"\
    \n    }\n]\n"
  type: dict
'''

from ansible.module_utils._text import to_native
from ansible_specdoc.objects import SpecField, FieldType, SpecDocMeta, SpecReturnValue
import traceback

from ansible_specdoc.objects import SpecField, FieldType, SpecDocMeta, SpecReturnValue
from ansible_collections.equinix.cloud.plugins.module_utils.equinix import (
    EquinixModule,
    getSpecDocMeta,
)

specdoc_examples = '''
- name: Gather list of public_ipv4 reserved_ip_blocks in a project
  hosts: localhost
  tasks:
  - equinix.cloud.metal_reserved_ip_block_list:
      type: public_ipv4
      project_id: 2a5122b9-c323-4d5c-b53c-9ad3f54273e7
''', '''
- name: Gather list of public_ipv6 reserved_ip_blocks in a project in metro ams
  hosts: localhost
  tasks:
  - equinix.cloud.metal_reserved_ip_block_list:
      type: public_ipv6
      project_id: 2a5122b9-c323-4d5c-b53c-9ad3f54273e7
      metro: ams
'''

module_spec = dict(
    type=SpecField(
        type=FieldType.string,
        description=['The type of IP address to list'],
        required=True,
        choices=['public_ipv4', 'public_ipv6', 'private_ipv4', 'global_ipv4', 'vrf'],
    ),
    project_id=SpecField(
        type=FieldType.string,
        description=['UUID of the project to list IP addresses for'],
        required=True,
    ),
    metro=SpecField(
        type=FieldType.string,
        description=['The metro to list IP addresses for'],
    ),
)

result_sample = [
'''
[
    {
        "address_family": 4,
        "customdata": {},
        "details": "some desc fff",
        "id": "16148fad-7839-4c63-b33f-0ecfec4f9e29",
        "management": false,
        "metro": "da",
        "netmask": "255.255.255.255",
        "network": "145.40.102.107",
        "project_id": "52000fb2-ee46-4673-93a8-de2c2bdba33b",
        "public": true,
        "quantity": 1,
        "tags": [],
        "type": "public_ipv4"
    }
]
'''    
]

SPECDOC_META = getSpecDocMeta(
    short_description="Gather list of reserved IP blocks",
    description="Gather list of reserved IP blocks matching the specified criteria",
    examples=specdoc_examples,
    options=module_spec,
    return_values={
        "resources": SpecReturnValue(
            description='Found resources',
            type=FieldType.dict,
            sample=result_sample,
        ),
    },
)


def main():
    module = EquinixModule(
        argument_spec=SPECDOC_META.ansible_spec,
        supports_check_mode=True,
    )
    try:
        module.params_syntax_check()
        typ = module.params.get('type')
        metro = module.params.get('metro')
        if (metro is not None) & (typ == 'global_ipv4'):
            module.fail_json(msg="metro is not valid parameter for global_ipv4")
        module.params['types'] = [typ]
        return_value = {'resources': module.get_list(
            "metal_ip_reservation")
        }
    except Exception as e:
        tr = traceback.format_exc()
        module.fail_json(msg=to_native(e), exception=tr)
    module.exit_json(**return_value)


if __name__ == '__main__':
    main()
