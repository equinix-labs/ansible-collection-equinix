- name: metal_ip_assignment
  module_defaults:
    equinix.cloud.metal_project:
      metal_api_token: '{{ metal_api_token }}'
    equinix.cloud.metal_device:
      metal_api_token: '{{ metal_api_token }}'
    equinix.cloud.metal_project_list:
      metal_api_token: '{{ metal_api_token }}'
    equinix.cloud.metal_device_list:
      metal_api_token: '{{ metal_api_token }}'
    equinix.cloud.metal_reserved_ip_block:
      metal_api_token: '{{ metal_api_token }}'
    equinix.cloud.metal_ip_assignment:
      metal_api_token: '{{ metal_api_token }}'
    equinix.cloud.metal_ip_assignment_list:
      metal_api_token: '{{ metal_api_token }}'
    equinix.cloud.metal_available_ips_list:
      metal_api_token: '{{ metal_api_token }}'
  block:
    - set_fact:
        test_resource_name_prefix: 'ansible-integration-test-ip-reservation'
    - set_fact:
        unique_id: "{{ lookup('password', '/dev/null chars=ascii_lowercase,digits length=8') }}"
    - set_fact:
        test_prefix: "{{ test_resource_name_prefix }}-{{ unique_id }}"
    - set_fact:
        test_os: ubuntu_22_04
    - set_fact:
        test_plan: c3.small.x86
    - set_fact:
        test_metro: da
    - set_fact:
        wait_seconds: 1200

    - name: create project for test
      equinix.cloud.metal_project:
        name: "{{ test_prefix }}-project"
      register: project

    - assert:
        that:
        - project.name == '{{ test_prefix }}-project'

    - name: request ip reservation
      equinix.cloud.metal_reserved_ip_block:
        type: "public_ipv4"
        metro: "{{ test_metro }}"
        quantity: 1
        project_id: "{{ project.id }}"
      register: ip_reservation

    - name: available addresses from reservation
      equinix.cloud.metal_available_ips_list:
        reserved_ip_block_id: "{{ ip_reservation.id }}"
        cidr: 32
      register: available_ips
    
    - assert:
        that:
          - "available_ips.available | length == 1"  


    - name: create device
      equinix.cloud.metal_device:
        project_id: "{{ project.id }}"
        hostname: "{{ test_prefix }}-dev1"
        operating_system: "{{ test_os }}"
        plan: "{{ test_plan }}"
        metro: "{{ test_metro }}"
        provisioning_wait_seconds: "{{ wait_seconds }}"
        state: present
      register: device

    - name: assign available IP
      equinix.cloud.metal_ip_assignment:
        device_id: "{{ device.id }}"
        address: "{{ available_ips.available[0] }}"
      register: assignment

    - assert:
        that:
          - assignment.device_id == "{{ device.id }}"
          - assignment.address   == "{{ available_ips.available[0] }}"

    - name: assignment info test
      equinix.cloud.metal_ip_assignment_list:
        device_id: "{{ device.id }}"
      register: assignment_list

    - name: destroy assignment
      equinix.cloud.metal_ip_assignment:
        id: "{{ assignment.id }} " 
        state: absent

    - name: delete ip reservation
      equinix.cloud.metal_reserved_ip_block:
        id: "{{ ip_reservation.id }}"
        state: absent

    - name: delete device
      equinix.cloud.metal_device:
        id: "{{ device.id }}"
        state: absent

    - name: delete project
      equinix.cloud.metal_project:
        id: "{{ project.id }}"
        state: absent


  always:
    - name: Announce teardown start
      debug:
        msg: "***** TESTING COMPLETE. COMMENCE TEARDOWN *****"

    - name: list test projects
      equinix.cloud.metal_project_list:
        name: "{{ test_prefix }}"
      register: test_projects
    
    - name: list devices in test projects
      equinix.cloud.metal_device_list:
        project_id: "{{ item.id }}"
      register: "test_devices"
      loop: "{{ test_projects.resources }}"

    - name: delete test devices
      equinix.cloud.metal_device:
        id: "{{ item.id }}"
        state: absent
      ignore_errors: yes
      loop: "{{ test_devices.results | map(attribute='resources') | flatten }}"

    - name: delete test projects
      equinix.cloud.metal_project:
        id: "{{ item.id }}"
        state: absent
      ignore_errors: yes
      loop: "{{ test_projects.resources }}"
