#!/usr/bin/python
# -*- coding: utf-8 -*-

# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

# DOCUMENTATION, EXAMPLES, and RETURN are generated by
# ansible_specdoc. Do not edit them directly.

DOCUMENTATION = ""
EXAMPLES = ""
RETURN = ""

# End of generated documentation

# This is a template for a new module. It is not meant to be used as is.
# It is meant to be copied and modified to create a new module.
# Replace all occurrences of "metal_resource" with the name of the new
# module, for example "metal_vlan".


from ansible.module_utils._text import to_native
from ansible_specdoc.objects import (
    SpecField,
    FieldType,
    SpecReturnValue,
)
import traceback

from ansible_collections.equinix.cloud.plugins.module_utils.equinix import (
    EquinixModule,
    get_diff,
    getSpecDocMeta,
)

MODULE_NAME = "metal_gateway"

module_spec = dict(
    id=SpecField(
        type=FieldType.string,
        description=['UUID of the gateway.'],
    ),
    project_id=SpecField(
        type=FieldType.string,
        description=['UUID of the project where the gateway is scoped to.'],
    ),
    ip_reservation_id=SpecField(
        type=FieldType.string,
        description=['UUID of Public or VRF IP Reservation to associate with the gateway, the reservation must be in the same metro as the VLAN, conflicts with private_ipv4_subnet_size.'],
    ),
    private_ipv4_subnet_size=SpecField(
        type=FieldType.integer,
        description=['Size of the private IPv4 subnet to create for this metal gateway, must be one of 8, 16, 32, 64, 128. Conflicts with ip_reservation_id.'],
    ),
    virtual_network_id=SpecField(
        type=FieldType.string,
        description=['UUID of the VLAN where the gateway is scoped to.'],
    )
)


specdoc_examples = [
    '''
- name: Create new gateway
  hosts: localhost
  tasks:
  - equinix.cloud.metal_gateway:
      project_id: "a4cc87f9-e00f-48c2-9460-74aa60beb6b0"
      ip_reservation_id: "83b5503c-7b7f-4883-9509-b6b728b41491"
      virtual_network_id: "eef49903-7a09-4ca1-af67-4087c29ab5b6"
''',
]

result_sample = ['''
{
  "changed": false,
  "id": "7624f0f7-75b6-4271-bc64-632b80f87de2",
  "project_id": "a4cc87f9-e00f-48c2-9460-74aa60beb6b0",
  "virtual_network_id": "eef49903-7a09-4ca1-af67-4087c29ab5b6",
y}
''']

MUTABLE_ATTRIBUTES = [
    k for k, v in module_spec.items() if v.editable
]

SPECDOC_META = getSpecDocMeta(
    short_description='Manage a gateway in Equinix Metal',
    description=(
        'Manage a gateway in Equinix Metal. '
        'You can use *id* to lookup the gateway. '
        'If you want to create new gateway, you must provide *project_id* and *virtual_network_id*.'
    ),
    examples=specdoc_examples,
    options=module_spec,
    return_values={
        "metal_gateway": SpecReturnValue(
            description='The module object',
            type=FieldType.dict,
            sample=result_sample,
        ),
    },
)


def main():
    module = EquinixModule(
        argument_spec=SPECDOC_META.ansible_spec,
        mutually_exclusive=[("private_ipv4_subnet_size", "ip_reservation_id")],
    )

    state = module.params.get("state")
    changed = False
    fetched = False

    try:
        module.params_syntax_check()
        if module.params.get("id"):
            tolerate_not_found = state == "absent"
            fetched = module.get_by_id(MODULE_NAME, tolerate_not_found)

        if fetched:
            module.params['id'] = fetched['id']
            if state == "present":
                diff = get_diff(module.params, fetched, MUTABLE_ATTRIBUTES)
                if diff:
                    module.fail_json(msg="Metal_gateway isn't mutable.")

            else:
                module.delete_by_id(MODULE_NAME)
                changed = True
        else:
            if state == "present":
                if not any((module.params.get("private_ipv4_subnet_size"), module.params.get("ip_reservation_id"))):
                    module.fail_json(msg="You must set either ip_reservation_id or private_ipv4_subnet_size!")
                import q
                q(module.params)
                module.params.pop("ip_reservation_id")
                fetched = module.create(MODULE_NAME)
                if 'id' not in fetched:
                    module.fail_json(msg="UUID not found in gateway creation response")
                changed = True
            else:
                fetched = {}
    except Exception as e:
        tb = traceback.format_exc()
        module.fail_json(msg=f"Error in metal_gateway: {to_native(e)}",
                         exception=tb)

    fetched.update({'changed': changed})
    module.exit_json(**fetched)


if __name__ == '__main__':
    main()
