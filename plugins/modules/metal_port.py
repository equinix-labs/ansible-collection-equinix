#!/usr/bin/python
# -*- coding: utf-8 -*-

# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

# DOCUMENTATION, EXAMPLES, and RETURN are generated by
# ansible_specdoc. Do not edit them directly.

DOCUMENTATION = '''
author: Equinix DevRel Team (@equinix) <support@equinix.com>
description: This Terraform resource doesn't create an API resource in Equinix Metal,
  but rather provides finer control for [Layer 2 networking](https://deploy.equinix.com/developers/docs/metal/layer2-networking/overview/).
module: metal_port
notes: []
options:
  bonded:
    description:
    - Whether the port should be bonded.
    required: true
    type: bool
  id:
    description:
    - UUID of the port.
    required: true
    type: str
  layer2:
    description:
    - Whether the port should be in Layer 2 mode.
    required: false
    type: bool
  native_vlan_id:
    description:
    - UUID of native VLAN of the port
    required: false
    type: str
requirements: null
short_description: Manage a device port in Equinix Metal
'''
EXAMPLES = '''
- name: Convert port to layer 2
  hosts: localhost
  tasks:
  - equinix.cloud.metal_port:
      id: device port ID
      bonded: true
      layer2: true
'''
RETURN = '''
metal_port:
  description: The Metal device port
  returned: always
  sample:
  - bonded: true
    id: 7624f0f7-75b6-4271-bc64-632b80f87de2
    layer2: true
  type: dict
'''

from ansible.module_utils._text import to_native
from ansible_specdoc.objects import (
    SpecField,
    FieldType,
    SpecReturnValue,
)
import traceback

from ansible_collections.equinix.cloud.plugins.module_utils.equinix import (
    EquinixModule,
    get_diff,
    getSpecDocMeta,
)

import equinix.services.metalv1 as equinix_metal

module_spec = dict(
    id=SpecField(
        type=FieldType.string,
        description=['UUID of the port.'],
        required=True,
    ),
    bonded=SpecField(
        type=FieldType.bool,
        description=['Whether the port should be bonded.'],
        required=True,
    ),
    layer2=SpecField(
        type=FieldType.bool,
        description=['Whether the port should be in Layer 2 mode.'],
        editable=True,
    ),
	native_vlan_id=SpecField(
		type=FieldType.string,
		description=["UUID of native VLAN of the port"],
        editable=True,
    ),
)


specdoc_examples = [
    '''
- name: Convert port to layer 2
  hosts: localhost
  tasks:
  - equinix.cloud.metal_port:
      id: "device port ID"
      bonded: true
      layer2: true
''',
]

return_values = [
{
  "id": "7624f0f7-75b6-4271-bc64-632b80f87de2",
  "bonded": True,
  "layer2": True,
}
]

MUTABLE_ATTRIBUTES = [
    k for k, v in module_spec.items() if v.editable
]

SPECDOC_META = getSpecDocMeta(
    short_description='Manage a device port in Equinix Metal',
    description=(
        'This Terraform resource doesn\'t create an API resource '
        'in Equinix Metal, but rather provides finer control for '
        '[Layer 2 networking](https://deploy.equinix.com/developers/docs/metal/layer2-networking/overview/).'
    ),
    examples=specdoc_examples,
    options=module_spec,
    return_values={
        "metal_port": SpecReturnValue(
            description='The Metal device port',
            type=FieldType.dict,
            sample=return_values,
        ),
    },
)

l2_types = {"layer2-individual", "layer2-bonded"}
l3_types = {"layer3", "hybrid", "hybrid-bonded"}

def main():
    module = EquinixModule(
        argument_spec=SPECDOC_META.ansible_spec,
    )

    state = module.params.get("state")

    if state != "present":
        module.fail_json(msg="Metal ports cannot be deleted")

    changed = False

    try:
        module.params_syntax_check()
        ports_api = equinix_metal.PortsApi(module.equinix_metal_client)
        port_includes = ["native_virtual_network", "virtual_networks"]
        port = ports_api.find_port_by_id(module.params.get('id'), port_includes)

        wants_layer2 = module.params.get('layer2')
        specified_layer2 = wants_layer2 is not None
        wants_bonded = module.params.get('bonded')
        wants_native_vlan_id = module.params.get('native_vlan_id')

        if port:
            is_bond_port = (port.type == "NetworkBondPort")
            if specified_layer2 and not is_bond_port:
                     module.fail_json(msg="layer2 flag can be set only for bond ports")
                
            if wants_layer2:
                if port.network_type not in l2_types:
                    port = ports_api.convert_layer2(port.id, {}, port_includes)
                    changed = True
            elif port.network_type in l2_types:
                port_convert_layer3_input = {
                    "request_ips": [
				        {"address_family": 4, "public": True},
				        {"address_family": 4, "public": False},
			            {"address_family": 6, "public": True},
                    ]
                }

                port = ports_api.convert_layer3(port.id, port_includes, port_convert_layer3_input)
                changed = True

            if wants_bonded != port.data.bonded:
                if wants_bonded:
                    # TODO Need to bond
                    changed = True
                else:
                    if is_bond_port and port.network_type in l3_types:
                        module.fail_json(msg="layer 3 bond ports cannot be unbonded")
                    # TODO Need to disbond
                    changed = True

            current_native_vlan_id = port.native_virtual_network.id if port.native_virtual_network is not None else None
            if wants_native_vlan_id != current_native_vlan_id:
                if wants_native_vlan_id is None:
                    # TODO Need to delete native virtual network
                    changed = True
                else:
                    # TODO Need to add/update native virtual network
                    changed = True
        else:
            module.fail_json(msg="Could not find metal_port with ID {0}".format(module.params['id']))
    except Exception as e:
        tb = traceback.format_exc()
        module.fail_json(msg="Error in metal_port: {0}".format(to_native(e)),
                         exception=tb)
    
    result = port.to_dict()
    result.update({'changed': changed})
    module.exit_json(**result)

if __name__ == '__main__':
    main()
