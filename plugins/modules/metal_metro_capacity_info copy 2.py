#!/usr/bin/python
# -*- coding: utf-8 -*-

# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

# DOCUMENTATION, EXAMPLES, and RETURN are generated by
# ansible_specdoc. Do not edit them directly.

DOCUMENTATION = '''
author: Equinix DevRel Team (@equinix) <support@equinix.com>
description: Gather information about the current capacity for Equinix Metal metros.
module: metal_metro_capacity_info
notes: []
options:
  metal_api_token:
    description:
    - The Equinix Metal API token to use.
    required: true
    type: str
  metal_api_url:
    description:
    - The Equinix Metal API URL to use.
    required: true
    type: str
requirements: null
short_description: Gather information about the current capacity for Equinix Metal
  metros
'''
EXAMPLES = '''
- name: Gather a list of metros and plans with their current capacity
  hosts: localhost
  tasks:
  - equinix.cloud.metal_metro_capacity_info:
      metal_api_token: '{{ lookup(''env'', ''METAL_API_TOKEN'') }}'
    register: result
  - debug:
      var: result
'''
RETURN = '''
capacity:
  description: Information about capacity that was found.
  returned: always
  sample:
  - am:
      c2.medium.x86:
        available_servers: 25
        level: string
      m2.xlarge.x86:
        available_servers: 15
        level: string
    da:
      c2.medium.x86:
        available_servers: 26
        level: string
      m2.xlarge.x86:
        available_servers: 11
        level: string
    dc:
      c2.medium.x86:
        available_servers: 14
        level: string
      m2.xlarge.x86:
        available_servers: 10
        level: string
  type: dict
'''

# End of generated documentation

from ansible.module_utils._text import to_native
from ansible_specdoc.objects import (
    SpecField,
    FieldType,
    SpecReturnValue,
)
import traceback
import requests

from ansible_collections.equinix.cloud.plugins.module_utils.equinix import (
    EquinixModule,
    getSpecDocMeta,
)

# Define module specifications
module_spec = dict(
    metal_api_token=SpecField(
        type=FieldType.string,
        description=['The Equinix Metal API token to use.'],
        required=True,
        no_log=True,
    ),
    metal_api_url=SpecField(
        type=FieldType.string,
        description=['The Equinix Metal API URL to use.'],
        required=True,
    ),
)

# Define examples for the module documentation
specdoc_examples = [
    '''
- name: Gather a list of metros and plans with their current capacity
  hosts: localhost
  tasks:
    - equinix.cloud.metal_metro_capacity_info:
        metal_api_token: "{{ lookup('env', 'METAL_API_TOKEN') }}"
      register: result

    - debug:
        var: result
''',
]

return_values = [
    {
        "am": {
            "c2.medium.x86": {
                "level": "string",
                "available_servers": 25
            },
            "m2.xlarge.x86": {
                "level": "string",
                "available_servers": 15
            }
        },
        "da": {
            "c2.medium.x86": {
                "level": "string",
                "available_servers": 26
            },
            "m2.xlarge.x86": {
                "level": "string",
                "available_servers": 11
            }
        },
        "dc": {
            "c2.medium.x86": {
                "level": "string",
                "available_servers": 14
            },
            "m2.xlarge.x86": {
                "level": "string",
                "available_servers": 10
            }
        }
    }
]

# Define the metadata for SpecDoc
SPECDOC_META = getSpecDocMeta(
    short_description='Gather information about the current capacity for Equinix Metal metros',
    description='Gather information about the current capacity for Equinix Metal metros.',
    examples=specdoc_examples,
    options=module_spec,
    return_values={
        "capacity": SpecReturnValue(
            description='Information about capacity that was found.',
            type=FieldType.dict,
            sample=return_values,
        ),
    },
)

def main():
    module = EquinixModule(
        argument_spec=SPECDOC_META.ansible_spec,
        supports_check_mode=True,
        is_info=True,
    )
    try:
        module.params_syntax_check()

        api_url = module.params['metal_api_url']
        api_token = module.params['metal_api_token']
        headers = {'X-Auth-Token': api_token}

        response = requests.get(f"{api_url}/capacity/metros", headers=headers)
        response.raise_for_status()

        result = response.json()

        return_value = {"capacity": result.get('capacity', {})}
    except Exception as e:
        tr = traceback.format_exc()
        module.fail_json(msg=to_native(e), exception=tr)

    module.exit_json(**return_value)

if __name__ == '__main__':
    main()