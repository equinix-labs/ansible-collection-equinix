#!/usr/bin/python
# -*- coding: utf-8 -*-

# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

# DOCUMENTATION, EXAMPLES, and RETURN are generated by
# ansible_specdoc. Do not edit them directly.

DOCUMENTATION = '''
author: Equinix DevRel Team (@equinix) <support@equinix.com>
description: Manage a Virtual Circuit in Equinix Metal. You can use *id* or *name*
  to lookup the resource. If you want to create new resource, you must provide *name*.
module: metal_virtual_circuit
notes: []
options:
  connection_id:
    description:
    - UUID of Connection where the VC is scoped to.
    required: false
    type: str
  customer_ip:
    description:
    - The Customer IP address which the CSR switch will peer with.
    - Will default to the other usable IP in the subnet.
    required: false
    type: str
  description:
    description:
    - Description for the Virtual Circuit resource.
    required: false
    type: str
  id:
    description:
    - UUID of the Virtual Circuit.
    required: false
    type: str
  md5:
    description:
    - The password that can be set for the VRF BGP peer
    required: false
    type: str
  metal_ip:
    description:
    - The Metal IP address for the SVI (Switch Virtual Interface) of the VirtualCircuit.
    - Will default to the first usable IP in the subnet.
    required: false
    type: str
  name:
    description:
    - Name of the Virtual Circuit resource.
    required: false
    type: str
  nni_vlan:
    description:
    - Equinix Metal network-to-network VLAN ID.
    required: false
    type: str
  peer_asn:
    description:
    - The BGP ASN of the peer.
    - The same ASN may be the used across several VCs, but it cannot be the same as
      the local_asn of the VRF.
    required: false
    type: str
  port_id:
    description:
    - UUID of the Connection Port where the VC is scoped to.
    required: false
    type: str
  project_id:
    description:
    - UUID of the Project where the VC is scoped to.
    required: false
    type: str
  speed:
    description:
    - Speed of the Virtual Circuit resource.
    required: false
    type: str
  subnet:
    description:
    - A subnet from one of the IP blocks associated with the VRF that we will help
      create an IP reservation for.
    - Can only be either a /30 or /31.
    - For a /31 block, it will only have two IP addresses, which will be used for
      the metal_ip and customer_ip.
    - For a /30 block, it will have four IP addresses, but the first and last IP addresses
      are not usable.
    - We will default to the first usable IP address for the metal_ip.
    required: false
    type: str
  tags:
    description:
    - Tags for the Virtual Circuit resource.
    required: false
    type: str
  vlan_id:
    description:
    - UUID of the VLAN to associate.
    required: false
    type: str
  vrf_id:
    description:
    - UUID of the VRF to associate.
    required: false
    type: str
requirements: null
short_description: Manage a Virtual Circuit in Equinix Metal
'''
EXAMPLES = '''
- name: Create new resource
  hosts: localhost
  tasks:
  - equinix.cloud.metal_virtual_circuit:
      name: new resource
      some_attribute: 42
'''
RETURN = '''
metal_virtual_circuit:
  description: The module object
  returned: always
  sample:
  - "\n{\n  \"changed\": false,\n  \"id\": \"7624f0f7-75b6-4271-bc64-632b80f87de2\"\
    ,\n  \"name\": \"new resource\",\n  \"some_attribute\": \"42\"\n}\n"
  type: dict
'''

# End of generated documentation

# This is a template for a new module. It is not meant to be used as is.
# It is meant to be copied and modified to create a new module.
# Replace all occurrences of "metal_resource" with the name of the new
# module, for example "metal_vlan".


from ansible.module_utils._text import to_native
from ansible_specdoc.objects import (
    SpecField,
    FieldType,
    SpecReturnValue,
)
import traceback

from ansible_collections.equinix.cloud.plugins.module_utils.equinix import (
    EquinixModule,
    get_diff,
    getSpecDocMeta,
)


module_spec = dict(
    id=SpecField(
        type=FieldType.string,
        description=['UUID of the Virtual Circuit.'],
    ),
    name=SpecField(
        type=FieldType.string,
        description=['Name of the Virtual Circuit resource.'],
        editable=True,
    ),
    connection_id=SpecField(
        type=FieldType.string,
        description=[
            'UUID of Connection where the VC is scoped to.'
        ],
    ),
    project_id=SpecField(
        type=FieldType.string,
        description=[
            'UUID of the Project where the VC is scoped to.'
        ],
    ),
    port_id=SpecField(
        type=FieldType.string,
        description=[
            'UUID of the Connection Port where the VC is scoped to.'
        ],
    ),
    nni_vlan=SpecField(
        type=FieldType.string,
        description=[
            'Equinix Metal network-to-network VLAN ID.'
        ],
    ),
    vlan_id=SpecField(
        type=FieldType.string,
        description=[
            'UUID of the VLAN to associate.'
        ],
    ),
    description=SpecField(
        type=FieldType.string,
        description=[
            'Description for the Virtual Circuit resource.'
        ],
    ),
    tags=SpecField(
        type=FieldType.string,
        description=[
            'Tags for the Virtual Circuit resource.'
        ],
    ),
    speed=SpecField(
        type=FieldType.string,
        description=[
            'Speed of the Virtual Circuit resource.'
        ],
    ),
    vrf_id=SpecField(
        type=FieldType.string,
        description=[
            'UUID of the VRF to associate.'
        ],
    ),
    peer_asn=SpecField(
        type=FieldType.string,
        description=[
            'The BGP ASN of the peer.',
            'The same ASN may be the used across several VCs, but it cannot be the same as the local_asn of the VRF.'
        ],
    ),
    subnet=SpecField(
        type=FieldType.string,
        description=[
            'A subnet from one of the IP blocks associated with the VRF that we will help create an IP reservation for.',
            'Can only be either a /30 or /31.',
            'For a /31 block, it will only have two IP addresses, which will be used for the metal_ip and customer_ip.',
            'For a /30 block, it will have four IP addresses, but the first and last IP addresses are not usable.',
            'We will default to the first usable IP address for the metal_ip.',
        ],
    ),
    metal_ip=SpecField(
        type=FieldType.string,
        description=[
            'The Metal IP address for the SVI (Switch Virtual Interface) of the VirtualCircuit.',
            'Will default to the first usable IP in the subnet.'
        ],
    ),
    customer_ip=SpecField(
        type=FieldType.string,
        description=[
            'The Customer IP address which the CSR switch will peer with.',
            'Will default to the other usable IP in the subnet.'
        ],
    ),
    md5=SpecField(
        type=FieldType.string,
        description=[
            'The password that can be set for the VRF BGP peer'
        ],
    ),
)


specdoc_examples = [
    '''
- name: Create new resource
  hosts: localhost
  tasks:
  - equinix.cloud.metal_virtual_circuit:
      name: "new resource"
      some_attribute: 42
''',
]

result_sample = ['''
{
  "changed": false,
  "id": "7624f0f7-75b6-4271-bc64-632b80f87de2",
  "name": "new resource",
  "some_attribute": "42"
}
''']

MUTABLE_ATTRIBUTES = [
    k for k, v in module_spec.items() if v.editable
]

SPECDOC_META = getSpecDocMeta(
    short_description='Manage a Virtual Circuit in Equinix Metal',
    description=(
        'Manage a Virtual Circuit in Equinix Metal. '
        'You can use *id* or *name* to lookup the resource. '
        'If you want to create new resource, you must provide *name*.'
    ),
    examples=specdoc_examples,
    options=module_spec,
    return_values={
        "metal_virtual_circuit": SpecReturnValue(
            description='The module object',
            type=FieldType.dict,
            sample=result_sample,
        ),
    },
)


def main():
    #import pydevd_pycharm
    #pydevd_pycharm.settrace('localhost', port=5555, stdoutToServer=True, stderrToServer=True)

    module = EquinixModule(
        argument_spec=SPECDOC_META.ansible_spec,
        required_one_of=[("name", "id")],
    )

    state = module.params.get("state")
    changed = False

    try:
        module.params_syntax_check()
        if module.params.get("id"):
            tolerate_not_found = state == "absent"
            fetched = module.get_by_id("metal_virtual_circuit", tolerate_not_found)
        else:
            fetched = module.get_one_from_list(
                "metal_virtual_circuit",
                ["name"],
            )

        if fetched:
            module.params['id'] = fetched['id']
            if state == "present":
                diff = get_diff(module.params, fetched, MUTABLE_ATTRIBUTES)
                if diff:
                    fetched = module.update_by_id(diff, "metal_virtual_circuit")
                    changed = True

            else:
                module.delete_by_id("metal_virtual_circuit")
                changed = True
        else:
            if state == "present":
                fetched = module.create("metal_virtual_circuit")
                if 'id' not in fetched:
                    module.fail_json(msg="UUID not found in resource creation response")
                changed = True
            else:
                fetched = {}
    except Exception as e:
        tb = traceback.format_exc()
        module.fail_json(msg="Error in metal_virtual_circuit: {0}".format(to_native(e)),
                         exception=tb)

    fetched.update({'changed': changed})
    module.exit_json(**fetched)


if __name__ == '__main__':
    main()
